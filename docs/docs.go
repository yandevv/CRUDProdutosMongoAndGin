// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/products": {
            "get": {
                "description": "Get a list of all products",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get all products",
                "operationId": "get-all-products",
                "responses": {
                    "200": {
                        "description": "Products fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/main.GetAllProductsResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch products",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new product with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Create a new product",
                "operationId": "create-product",
                "parameters": [
                    {
                        "description": "Product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateProductDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body data",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create product",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "Get a product by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get a product by ID",
                "operationId": "get-product-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/main.GetProductByIdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid product ID",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch product",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing product with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update an existing product",
                "operationId": "update-product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.UpdateProductDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid product ID or request body data",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update product",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a product by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete a product by ID",
                "operationId": "delete-product-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid product ID",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete product",
                        "schema": {
                            "$ref": "#/definitions/main.DefaultResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.CreateProductDTO": {
            "type": "object",
            "required": [
                "name",
                "price",
                "type",
                "weight"
            ],
            "properties": {
                "color": {
                    "description": "Color of the product",
                    "type": "string",
                    "example": "gray"
                },
                "description": {
                    "description": "Description of the product",
                    "type": "string",
                    "example": "It's a object used to hold papers together."
                },
                "name": {
                    "description": "Name of the product",
                    "type": "string",
                    "example": "Paperclip"
                },
                "price": {
                    "description": "Price of the product in the local currency",
                    "type": "number",
                    "example": 0.1
                },
                "type": {
                    "description": "Type of the product (e.g., office supplies, electronics, etc.)",
                    "type": "string",
                    "example": "office_supplies"
                },
                "weight": {
                    "description": "Weight of the product in kilograms",
                    "type": "number",
                    "example": 0.05
                }
            }
        },
        "main.DefaultResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "main.GetAllProductsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.Product"
                    }
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "main.GetProductByIdResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/main.Product"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "main.Product": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "Color of the product",
                    "type": "string",
                    "example": "gray"
                },
                "description": {
                    "description": "Description of the product",
                    "type": "string",
                    "example": "It's a object used to hold papers together."
                },
                "id": {
                    "description": "Unique identifier for the product",
                    "type": "string",
                    "example": "1"
                },
                "name": {
                    "description": "Name of the product",
                    "type": "string",
                    "example": "Paperclip"
                },
                "price": {
                    "description": "Price of the product in the local currency",
                    "type": "number",
                    "example": 0.1
                },
                "registerDate": {
                    "description": "Register date of the product",
                    "type": "string",
                    "example": "2025-06-22T19:57:53.788Z"
                },
                "type": {
                    "description": "Type of the product (e.g., office supplies, electronics, etc.)",
                    "type": "string",
                    "example": "office_supplies"
                },
                "weight": {
                    "description": "Weight of the product in kilograms",
                    "type": "number",
                    "example": 0.05
                }
            }
        },
        "main.UpdateProductDTO": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "Updated color of the product",
                    "type": "string",
                    "example": "gray"
                },
                "description": {
                    "description": "Updated description of the product",
                    "type": "string",
                    "example": "It's a object used to hold papers together."
                },
                "name": {
                    "description": "Updated name of the product",
                    "type": "string",
                    "example": "Paperclip"
                },
                "price": {
                    "description": "Updated price of the product",
                    "type": "number",
                    "example": 0.1
                },
                "registerDate": {
                    "description": "Updated register date of the product",
                    "type": "string",
                    "example": "2025-06-22T19:57:53.788Z"
                },
                "type": {
                    "description": "Updated type of the product",
                    "type": "string",
                    "example": "office_supplies"
                },
                "weight": {
                    "description": "Updated weight of the product",
                    "type": "number",
                    "example": 0.05
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Product's CRUD API",
	Description:      "This is a sample CRUD API for managing products.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
